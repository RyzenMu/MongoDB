Setting Up:
download .msi MOngodb server - community edition
installation setup -- choose network service & install compass along with it.
download mongodb Shell (mongosh) zip file
extract it to the programs directory
copy bin path and paste it to the environment-variables

features of mongobd:
it does not null values because it is not-structured


Connection Commands:
in the compass press Connection
db.getMongo();

DB Formats:
key-values
Documents
Columnar -- time
Graph Formats

DB Commands:
show dbs
use db1 -- creates new database with name db1
show collections
db.books.createOne({id:1, name:"silapathigaram", author:"tholkapiyar"});
let msg = "Hello orld";
printjson(msg);
db -- gives the name of the current db
join == embedded Documents
db.coll.createMany([{},{}, {}]);
_id can be passsed to the object to get replaced by the dafaulkt id
db.coll.find(name="max");
db.coll.find(); -- lists all documents
db.coll.insertOne() -- mongngo method
db.coll.insertmany() -- mongodb method.
db.coll.find().pretty()
db.coll.find().limit(3);
db.coll.find().limit(3).skip(3);
db.coll.updateOne({_id:131}, {$set:{date:"01/09/2024"}})
db.coll.updateOne({_id:156}, {$set:{releaseDate:"7-8-26"}}, {upsert:true}) -- if condition is not true it will insert it.
db.coll.updateOne({}, {$set:{fruit:"orange"}}) -- updates the first document.
db.coll.deleteOne({_id:126});
db.coll.deleteMany({fruit:"pomo"});

MongoDB Data Types
printjson() === print()
embedded document are nested documents
db.coll.createIndex({"customer":1, "city":1}); -- creates a compounded index 
compounded index reduces searching time.
3.46
db.ordercollection.createIndex({"items_purchased.item":1}); -- Multi Key index
db.ordercollection.find({
  "items_purchased": {
    $elemMatch: { "item": "bit" }
  }
});

2d-sphere Index creation
db.places.createIndex({location:"2dsphere"}) -- used in map kind of application uber, ola
db.collection.find({
    location: {
        $near: {
            $geometry: {
                type: "Point",
                coordinates: [longitude, latitude]  // Replace with actual coordinates
            },
            $maxDistance: 10000  // Optional: Maximum distance in meters (10 km in this case)
        }
    }
}).limit(1);  // You can adjust the limit as needed to return more results

text type index is mostly used for description
db.collection.createIndex({"customername":"text"});

sharding is creating index for hashing like passwords 

db.collection.createIndex({"name":1},{unique:true});

4.20

partialFilterExpression
db.collection.createIndex({"city":1}, {partialFilterExpression:{city : "patna"}})

partialFilterExpression with name
db.collection.createIndex({city:1}, {partialFilterExpresion:{city:"patna"}, name: "city-index-patna"});

username should be unique in the database.

sparse- index with name
db.collection.createIndex({username:1}, {sparse:true, name:username-sparsed});

TTL-Index -- (Total time to live) -- deleting one by one 
db.collection.createIndex({"expiryDate:1"}, {expiryAfterSeconds: 100});

LIST oF INDEXES
db.collection.getIndexes();

DELETE INDEXES
db.collection.dropnIndex("indexName");

Aggregation:
aggregation are those operations in mongoDb that examiones the data sets, perform calculations on them and return the calculated results.

db.collection.aggregate([{$match:{city:"cityname"}}]);

Combining Aggregate:
db.collection.aggregate([{$match:{city:"Combsstad"}}, {$count:"Total-Combsstad"}]);

Aggregate with project:
db.collection.aggregate([{$match:{city:"Combsstad"}}, {$project:{customername:0}}]);

$out() -- creating new collection out of existing collection
db.collection.aggregate([{$match:{city:"Combsstad"}}, {$out:{db:"customer", coll:"collectionname"}}]);

$limit() -- limits the result.
$skip() -- skips the result.

$group:
db.collection.aggregate(
  [
    {
      $group: 
      {
        _id :"$city",
        accumulated-city: {
          $sum:1
          }
      }
    }
  ]
);

$sum: 1 = sum+1
$sum:5 = sum+5
MongoShell should be used for enterprose level

Do not use compassor any UI 

SORT:
$sort:1 -- descending

UNWIND();
$unwind method unwinds the array and displays as separate document
{
  _id:1,
  product : "Apple Mobile",
  color : ['Green', 'Blue', 'Red']
}
db.collection.aggregate([$unwind:'$color']);
{
  _id:1,
  product : "Apple Mobile",
  color : 'Green'
}
{
  _id:1,
  product : "Apple Mobile",
  color : 'Blue'
}
{
  _id:1,
  product : "Apple Mobile",
  color : 'Red'
}


GEONEAR:
$geoNear -- specifies the nearest target.

REDACT:
$redact() - restrict the access
[
  {
    $redact :{
      $cond : {
        if : {
          $eq: ["city", 'Combsstad'],
        },
        then: "$$DESCEND",
        else: "$$PRUNE",
      }
    }
  }
]

LOOKUP:
$lookup combines two collection (similar to join table)


CAPPED COLLECTION:
db.createCollection('cappedCollectionName', {capped:true, size:100, max:3});
db.cappedCollectionName.isCapped();
db.runCommand({'convertToCapped':"ordercollection", size:500, max:5});

GRID FS -- FS CHUNKS AND FS FILES 
used for videos more than 16mb
chunk size is 255kb

SECONDARY NODES -- 
if primary server is down , the secondary server will save the day from customer.
there can be 50 secondary nodes (servers)


















